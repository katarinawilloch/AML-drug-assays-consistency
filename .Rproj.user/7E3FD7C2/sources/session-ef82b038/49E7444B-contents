library(lme4)
library(lmerTest)
library(flexplot)
library(RColorBrewer)
library(plotly)
library(performance)


#Functions
#----Model----
create_model <- function(formula, df, model_spec="lmer", random_effects){
  
  if(model_spec == "lmer"){
    model <- lmer(formula, data = df)
  }
  else if(model_spec == "nlme"){
    model <- lme(formula, random = random_effects, data=df)
  }
  else if(model_spec == "lm"){
    model <- lm(formula, data=df)
  }
  else if(model_spec == "binomial"){
    model <- glm(formula, data=df, family = "binomial")
  }
  else{
    "No model specification given"
  }
  
  return(c(model, model_spec))
}

#----Model results----
model_results <- function(models, group = "Response_metric", data_frame_org, scaling_group = "drug"){
  df <- data.frame(
    model = character(),
    Fixed_Effect_Term = character(),
    Random_Eeffect_Term = character(),
    Response_metric = character(),
    Fixed_Effect_Coefficient = numeric(),
    p_value = numeric(),
    Intercept = numeric(),
    Degree_of_Freedom = numeric(),
    stringsAsFactors = FALSE, 
    lower = numeric(),
    upper = numeric()
  )
  
  #Extract fixed effects and their coefficients
  for (model in models) {
    print(model)
    model_formula <- formula(model)
    dependent_var <- as.character(model_formula[[2]])
    fixed_effects <- fixef(model)  
    fixed_effect_terms <- names(fixed_effects)
    fixed_effect_names <- fixed_effect_terms[fixed_effect_terms != "(Intercept)"]
    fixed_effect_coef <- fixed_effects[fixed_effect_names]
    coef_model <- summary(model)$coefficients
    p_values <- coef_model[, "Pr(>|t|)"]
    p_values_excluding_intercept <- p_values[fixed_effect_terms != "(Intercept)"]
    intercept <- fixed_effects[fixed_effect_terms[fixed_effect_terms == "(Intercept)"]]
    degree_freedom <- coef_model[, "df"]
    degree_freedom <- degree_freedom[fixed_effect_terms != "(Intercept)"]
    print(degree_freedom)
    response_metric <- dependent_var
    c <- confint(model, method = "profile")
    ci_fixed <- c[rownames(c) %in% fixed_effect_names, , drop = FALSE]  # Subset only fixed effects
    lower <- ci_fixed[, 1]
    upper <- ci_fixed[, 2]
    
    
    #Create a temporary data frame for this model's fixed effects
    temp_df <- data.frame(
      model = paste0(model_formula[2], model_formula[1], model_formula[3]),
      Fixed_Effect_Term = fixed_effect_names,
      Random_Effect_Term = str_remove(strsplit(as.character(model_formula[3]), split = "\\+ \\(")[[1]][2], "\\)"),
      Response_metric = response_metric,
      Fixed_Effect_Coefficient = fixed_effect_coef,
      p_value = p_values_excluding_intercept,
      Intercept = intercept,
      Degree_of_Freedom = degree_freedom,
      stringsAsFactors = FALSE, 
      lower = lower, 
      upper = upper
    )
    
    # n_per_group <- tapply(data_frame_org[,response_metric], data_frame_org[,scaling_group], length)
    # print(n_per_group)
    # 
    # means <- tapply(data_frame_org[,response_metric], data_frame_org[,scaling_group], mean)
    # sds <- tapply(data_frame_org[,response_metric], data_frame_org[,scaling_group], sd)
    # 
    # overall_mean <- sum(means * n_per_group) / sum(n_per_group)
    # overall_sd <- sqrt(sum((sds^2 + means^2) * n_per_group) / sum(n_per_group) - overall_mean^2)
    # 
    # print(fixed_effect_names)
    # fixed_effect_coeff <- fixef(model)[fixed_effect_names]  
    # print(fixed_effect_coeff[fixed_effect_names])
    # print('fixed_effect_coef')
    # unscaled_coeff <- fixed_effect_coeff * overall_sd + overall_mean
    # print(overall_mean)
    # print(unscaled_coeff)
    # untransformed_coef <-  (0.5 * unscaled_coeff + 1)^2
    # print(untransformed_coef)
    df <- rbind(df, temp_df)
  }
  
  get_significance_stars <- function(p) {
    if (p < 0.001) {
      return("***")
    } else if (p < 0.01) {
      return("**")
    } else if (p < 0.05) {
      return("*")
    } else {
      return(" ")
    }
  }
  
  # Check if `df` has the necessary columns
  if (!all(c("Response_metric", "model") %in% colnames(df))) {
    stop("The columns 'Response_metric' and/or 'model' are missing in the data frame.")
  }
  
  # Check the structure of `df` for potential issues
  print(str(df))
  
  # Check for missing values in critical columns
  if (any(is.na(df$Response_metric)) || any(is.na(df$model))) {
    warning("There are NA values in 'Response_metric' or 'model' columns.")
  }
  
  print("######################STARS#######################")
  #Add significance stars to the data frame
  df$significance_stars <- sapply(df$p_value, get_significance_stars)
  #Count the number of fixed effects per category
  fixed_effect_counts <- df %>%
    group_by(Response_metric, model) %>%
    filter(row_number() == 1) %>%   
    ungroup() %>%                   
    group_by(Response_metric) %>%           
    dplyr::summarize(count = n()) %>%
    as.data.frame()
  print(df)
  df <- df %>%
    left_join(fixed_effect_counts, by = "Response_metric")
  print("####################LEFT")
  df$corrected_p_value <- df$p_value * df$count
  
  
  print(df$model)
  
  rownames(df) <- NULL
  df <- df %>% mutate(Fixed_Effect_Term = case_when(Fixed_Effect_Term ==  "positive_controlBzCl" ~ "Positive Control: BzCl + Nr of Concentration Points: 5 + Drug Sensitivity Readout: CellTiter-Glo", 
                                                    Fixed_Effect_Term ==  "time_until_sample_usageHandled within 2-72 hours" ~ "Time until sample usage: Handled within 2-72 hours",
                                                    Fixed_Effect_Term ==  "mediumMononuclear cell medium" ~ "Medium: Mononuclear cell medium",
                                                    Fixed_Effect_Term ==  "mediumRPMI + fetal bovine serum (FBS) (10%)" ~ "Medium: RPMI + fetal bovine serum (FBS) (10%)",
                                                    Fixed_Effect_Term ==  "microenvironmental_stimuliNone" ~ "Microenvironmental stimuli: None",
                                                    Fixed_Effect_Term ==  "microenvironmental_stimulitransiently cultured with feeder cells, activate samples with autologous BM T helper cells in the presence of IL-2 and a T-cell expansion cocktail" ~ "Microenvironmental stimuli: Transiently cultured with feeder cells, activate samples with autologous BM T helper cells in the presence of IL-2 and a T-cell expansion cocktai",
                                                    Fixed_Effect_Term ==  "plate_readerPherastar, Cytation5, Insight, Tecan" ~ "Plate readers: Pherastar, Cytation5, Insight, Tecan",
                                                    Fixed_Effect_Term ==  "centrifugation_procedureLymphoPrepTM gradient centrifugation " ~ "Centrifugation procedure: LymphoPrepTM gradient centrifugation",
                                                    Fixed_Effect_Term ==  "centrifugation_procedureSupernatant isolation at 300g 10min, density centrifugation at 400g for 20min without brake, afterwards always 300g 5 min" ~ "Centrifugation procedure: Supernatant isolation at 300g 10min, density centrifugation at 400g for 20min without brake, afterwards always 300g 5 min",
                                                    Fixed_Effect_Term ==  "cells5000" ~ "Cells: 5000",
                                                    Fixed_Effect_Term ==  "cell_counting_methodTrypan blue (Countess™ II FL Automated Cell Counter)" ~ "Cell counting method: Trypan blue (Countess™ II FL Automated Cell Counter)",
                                                    TRUE ~ Fixed_Effect_Term))
  
  df <- df %>% mutate(Response_metric = case_when(Response_metric ==  "DSS2_boxcox_sclaed2" ~ "DSS2: Box Cox Transformed and Scaled",
                                                  Response_metric == "auc_a_box_cox_scaled2" ~ "AUC A: Box cox Transformed and Scaled",
                                                  TRUE ~ Response_metric))
  df <- df[order(-df$Fixed_Effect_Coefficient), ]
  
  #returns df with summarised results
  return(df)
}

#----Model visualisation----
model_visualisation <- function(model){
  custom_palette <- colorRampPalette(RColorBrewer::brewer.pal(3, "Dark2"))(3)
  line_types <- rep("solid", 46)
  ggplotly(visualize(mixed_model_time_until_sample_usage_box_cox_scaled, plot = "model", line.size = 0.5)
           + scale_size(range = c(3, 5))
           + scale_color_manual(values = custom_palette)
           + guides(shape = "none"))
}

#----Model Diagnostics----
model_diagnostics <- function(model, df, output_dir = NULL, check_model = TRUE){
  print(output_dir)
  if (!is.null(output_dir)){
    if (!dir.exists(output_dir)){
      dir.create(output_dir, recursive = TRUE)
    } else {
      print("Dir already exists!")
    }
  }
  
  icc_model <- icc(model)
  icc_df <- data.frame(model = paste0(formula(model)[2], formula(model)[1], formula(model)[3]), icc = icc_model$icc, design_effect = icc_model$design.effect)
  print(formattable(icc_df))
  
  overall_df <- data.frame(icc_df = icc_df)
  
  
  
  all_datasets_v2$.resid <- residuals(model)
  all_datasets_v2$.fitted <- fitted(model)
  
  ggplot(all_datasets_v2 , aes(x = .fitted, y = .resid, color = drug)) +
    geom_point() +
    labs(title = "Residuals Level-1 - Between group homoscdasticity check") +
    theme(axis.text.x = element_text(angle = 90)) +
    guides(color = "none")
  
  ggplot(all_datasets_v2 , aes(x = drug, y = .resid)) +
    geom_boxplot() +
    labs(title = "Residuals Level-1 for each drug - Within-group homoscdasticity check") +
    theme(axis.text.x = element_text(angle = 90))
  
  if (check_model == TRUE){
    check_model(model)
  }
  
  library(HLMdiag)
  # Extract residuals and fitted values
  residuals_level_1 <- hlm_resid(model, level=1)
  residuals_level_2 <- hlm_resid(model, level="drug")
  
  
  ggplot(residuals_level_1 , aes(x = .mar.fitted, y = .mar.resid)) +
    geom_point() +
    geom_smooth() + 
    labs(title = "Margial Residuals vs Fitted Values")
  
  qqnorm(residuals_level_1$.mar.resid)
  qqline(residuals_level_1$.mar.resid, col = "darkgreen")
  
  ggplot(residuals_level_1 , aes(x = drug, y = .resid)) +
    geom_boxplot() +
    labs(title = "Residuals Level-1 for each drug - Within-group homoscdasticity check") +
    theme(axis.text.x = element_text(angle = 90))
  
  ggplot(residuals_level_1 , aes(x = .fitted, y = .resid)) +
    geom_point() +
    geom_smooth() + 
    labs(title = "Residuals Level-1 - Between group homoscdasticity check") +
    theme(axis.text.x = element_text(angle = 90)) +
    facet_wrap(~drug)
  
  ggplot(residuals_level_1 , aes(x = .fitted, y = .resid, color=drug)) +
    geom_point() +
    geom_smooth() + 
    labs(title = "Residuals Level-1 - Between group homoscdasticity check") +
    theme(axis.text.x = element_text(angle = 90))
  
  
  library(DHARMa)
  
  # Simulate residuals from the model
  sim_res <- simulateResiduals(fittedModel = model)
  
  # Plot residuals
  plot(sim_res)
  
  # Test for homoscedasticity
  testResiduals(sim_res)
  
  
  qqnorm(residuals_level_1$.resid)
  qqline(residuals_level_1$.resid, col = "darkgreen")
  
  qqnorm(residuals_level_2$.ls.intercept)
  qqline(residuals_level_2$.ls.intercept, col = "darkgreen")
  
  qqnorm(residuals_level_2$.ls.time_until_sample_usage_handled_within_2_72_hours)
  qqline(residuals_level_2$.ls.time_until_sample_usage_handled_within_2_72_hours, col = "darkgreen")
  
  
  ggplot(residuals_level_2 , aes(x = drug, y = .ls.intercept)) +
    geom_boxplot() +
    labs(title = "Residuals vs Fitted Values")

  
  influence_data <- influence(model, group = "drug")
  plot(influence_data, which = "cook", main = "Influence Plot: Cook's Distance")
  
  return(overall_df)
  
}




