#Enserink-BeatAML ----
beat_aml_enserink <- rbind(subset(dss_github_enserink, select = c(drug, Patient.num, dss2, lab)), subset(dss_beat_aml_common_drugs, select = c(drug, Patient.num, dss2, lab)))
beat_aml_enserink
beat_aml_enserink_for_heatmap <- pivot_wider(beat_aml_enserink, names_from = Patient.num, values_from = dss2)
beat_aml_enserink_for_heatmap
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
#Enserink-BeatAML ----
beat_aml_enserink <- rbind(subset(dss_github_enserink, select = c(drug, Patient.num, dss2, lab)), subset(dss_beat_aml_common_drugs, select = c(drug, Patient.num, dss2, lab)))
beat_aml_enserink_for_heatmap <- pivot_wider(beat_aml_enserink, names_from = drug, values_from = dss2)
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
rownames(beat_aml_enserink_for_heatmap) <- beat_aml_enserink_for_heatmap$drug
beat_aml_enserink_for_heatmap$drug <- NULL
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
# Check how many values are missing in each row
missing_per_row <- apply(beat_aml_enserink_for_heatmap, 1, function(row) sum(is.na(row)))
#Remove row if total missing in row is higher than 200
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap[missing_per_row <= 30, ]
# Check how many values are missing in each col
missing_per_col <- apply(beat_aml_enserink_for_heatmap_filtered, 2, function(row) sum(is.na(row)))
#Remove col if total missing in col is higher than 100
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap_filtered[,missing_per_col <= 200]
#Remove col if total missing in col is higher than 100
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap_filtered[,missing_per_col <= 200]
pca_plots(beat_aml_enserink_for_heatmap_filtered, title = "PCA Plot - Enserink and BeatAML", "~/Desktop/UiO/Project 1/Figures/Enserink_BeatAML_PCA_Plot.png", 'Patient.num', 'lab')
beat_aml_enserink_for_heatmap_filtered
#Enserink-BeatAML ----
beat_aml_enserink <- rbind(subset(dss_github_enserink, select = c(drug, Patient.num, dss2, lab)), subset(dss_beat_aml_common_drugs, select = c(drug, Patient.num, dss2, lab)))
beat_aml_enserink_for_heatmap <- pivot_wider(beat_aml_enserink, names_from = drug, values_from = dss2)
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
rownames(beat_aml_enserink_for_heatmap) <- beat_aml_enserink_for_heatmap$drug
beat_aml_enserink_for_heatmap$drug <- NULL
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
# Check how many values are missing in each row
missing_per_row <- apply(beat_aml_enserink_for_heatmap, 1, function(row) sum(is.na(row)))
#Remove row if total missing in row is higher than 200
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap[missing_per_row <= 30, ]
# Check how many values are missing in each col
missing_per_col <- apply(beat_aml_enserink_for_heatmap_filtered, 2, function(row) sum(is.na(row)))
#Remove col if total missing in col is higher than 100
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap_filtered[,missing_per_col <= 200]
all_dss_for_heatmap <- na.omit(beat_aml_enserink_for_heatmap_filtered)
pca_plots(beat_aml_enserink_for_heatmap_filtered, title = "PCA Plot - Enserink and BeatAML", "~/Desktop/UiO/Project 1/Figures/Enserink_BeatAML_PCA_Plot.png", 'Patient.num', 'lab')
#Enserink-BeatAML ----
beat_aml_enserink <- rbind(subset(dss_github_enserink, select = c(drug, Patient.num, dss2, lab)), subset(dss_beat_aml_common_drugs, select = c(drug, Patient.num, dss2, lab)))
beat_aml_enserink_for_heatmap <- pivot_wider(beat_aml_enserink, names_from = drug, values_from = dss2)
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
rownames(beat_aml_enserink_for_heatmap) <- beat_aml_enserink_for_heatmap$drug
beat_aml_enserink_for_heatmap$drug <- NULL
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
# Check how many values are missing in each row
missing_per_row <- apply(beat_aml_enserink_for_heatmap, 1, function(row) sum(is.na(row)))
#Remove row if total missing in row is higher than 200
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap[missing_per_row <= 30, ]
# Check how many values are missing in each col
missing_per_col <- apply(beat_aml_enserink_for_heatmap_filtered, 2, function(row) sum(is.na(row)))
#Remove col if total missing in col is higher than 100
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap_filtered[,missing_per_col <= 200]
#all_dss_for_heatmap <- na.omit(beat_aml_enserink_for_heatmap_filtered)
#beat_aml_enserink_for_heatmap_filtered[is.na(beat_aml_enserink_for_heatmap_filtered)] <- 0
pca_plots(beat_aml_enserink_for_heatmap_filtered, title = "PCA Plot - Enserink and BeatAML", "~/Desktop/UiO/Project 1/Figures/Enserink_BeatAML_PCA_Plot.png", 'Patient.num', 'lab')
beat_aml_enserink_for_heatmap_filtered
#all_dss_for_heatmap <- na.omit(beat_aml_enserink_for_heatmap_filtered)
beat_aml_enserink_for_heatmap_filtered[is.na(beat_aml_enserink_for_heatmap_filtered)] <- 0
pca_plots(beat_aml_enserink_for_heatmap_filtered, title = "PCA Plot - Enserink and BeatAML", "~/Desktop/UiO/Project 1/Figures/Enserink_BeatAML_PCA_Plot.png", 'Patient.num', 'lab')
all_dss_for_heatmap <- na.omit(beat_aml_enserink_for_heatmap_filtered)
all_dss_for_heatmap
fimm_karolinska<- rbind(subset(dss_karolinska, select = c(drug, Patient.num, dss2,lab)), subset(dss_fimm_common_drugs, select = c(drug, Patient.num, dss2,lab)))
all_dss_for_heatmap <- pivot_wider(fimm_karolinska, names_from = drug, values_from = dss2)
all_dss_for_heatmap <- as.data.frame(all_dss_for_heatmap)
na_counts <- colSums(is.na(all_dss_for_heatmap))
df_clean <-all_dss_for_heatmap[, na_counts < 30]
df_clean <- df_clean[complete.cases(df_clean), ]
dim(df_clean)
all_dss_for_heatmap <- na.omit(df_clean)
pca_plots(all_dss_for_heatmap, title = "PCA Plot", "~/Desktop/UiO/Project 1/Figures/FIMM_Karolinska.png", 'Patient.num', 'lab')
#Enserink-BeatAML ----
beat_aml_enserink <- rbind(subset(dss_github_enserink, select = c(drug, Patient.num, dss2, lab)), subset(dss_beat_aml_common_drugs, select = c(drug, Patient.num, dss2, lab)))
beat_aml_enserink_for_heatmap <- pivot_wider(beat_aml_enserink, names_from = drug, values_from = dss2)
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
rownames(beat_aml_enserink_for_heatmap) <- beat_aml_enserink_for_heatmap$drug
beat_aml_enserink_for_heatmap$drug <- NULL
beat_aml_enserink_for_heatmap <- as.data.frame(beat_aml_enserink_for_heatmap)
# Check how many values are missing in each row
missing_per_row <- apply(beat_aml_enserink_for_heatmap, 1, function(row) sum(is.na(row)))
#Remove row if total missing in row is higher than 200
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap[missing_per_row <= 30, ]
# Check how many values are missing in each col
missing_per_col <- apply(beat_aml_enserink_for_heatmap_filtered, 2, function(row) sum(is.na(row)))
#Remove col if total missing in col is higher than 100
beat_aml_enserink_for_heatmap_filtered <- beat_aml_enserink_for_heatmap_filtered[,missing_per_col <= 200]
#beat_aml_for_heatmap[is.na(beat_aml_for_heatmap)] <- 0
all_dss_for_heatmap <- na.omit(beat_aml_enserink_for_heatmap_filtered)
all_dss_for_heatmap
#beat_aml_enserink_for_heatmap_filtered[is.na(beat_aml_enserink_for_heatmap_filtered)] <- 0
pca_plots(all_dss_for_heatmap, title = "PCA Plot - Enserink and BeatAML", "~/Desktop/UiO/Project 1/Figures/Enserink_BeatAML_PCA_Plot.png", 'Patient.num', 'lab')
library(ComplexHeatmap)
heatmap_plots(fimm_common_drugs_heatmap,NaN, filename = "Desktop/UiO/Project 1/Figures/FIMM_github_calculations_common_drugs.png")
fimm_common_drugs_heatmap <- pivot_wider(subset(dss_fimm_common_drugs, select = c(drug, Patient.num, dss2)), names_from = Patient.num, values_from = dss2)
fimm_common_drugs_heatmap <- as.data.frame(fimm_common_drugs_heatmap)
rownames(fimm_common_drugs_heatmap) <- fimm_common_drugs_heatmap$drug
fimm_common_drugs_heatmap$drug <- NULL
fimm_common_drugs_heatmap <- as.data.frame(fimm_common_drugs_heatmap)
fimm_common_drugs_heatmap <- na.omit(fimm_common_drugs_heatmap)
heatmap_plots(fimm_common_drugs_heatmap,NaN, filename = "Desktop/UiO/Project 1/Figures/FIMM_github_calculations_common_drugs.png")
fimm_common_drugs_heatmap
heatmap_plots(fimm_common_drugs_heatmap,NaN, filename = "Desktop/UiO/Project 1/Figures/FIMM_github_calculations_common_drugs.png")
# Install libraries ----
library(readr)
library("ggplot2")
library(ggforce)
library(dplyr)
library(stringr)
library(pheatmap)
library(tidyr)
library(reshape2)
library(RColorBrewer)
library(tidyverse)
library(readxl)
library(DataExplorer)
library(Hmisc)
library(htmltools)
library(VennDiagram)
library(grid)
data_exploration <- function(df, output_loc, file_name){
summary_stats <- describe(df)
plot(summary_stats)
print(summary_stats)
df_long <- melt(is.na(df))
p <- ggplot(df_long, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "white")) +
labs(x = "Columns", y = "Rows", fill = "Missing") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
report = create_report(df, output_dir = output_loc, output_file = file_name)
}
venn_diagram <- function(data1, data2, column1, column2, output_plot1, output_plot2){
# Calculate the intersection of values in the corresponding columns
intersection <- intersect(data1, data2)
# Create Venn diagram
diagram <- venn.diagram(
x = list(column1 = data1, column2 = data2),
category.names = c(column1, column2),
main = "Venn Diagram of Overlapping Rows",
sub = paste("Number of overlapping rows:", length(intersection)),
filename = output_plot1,  # Set filename to NULL to prevent saving to a file
output = FALSE
)
# Find overlapping and non-overlapping values
overlap <- intersect(data1, data2)
only_in_data1 <- setdiff(data1, data2)
only_in_data2 <- setdiff(data2, data1)
# Create a table of overlapping and non-overlapping values
overlap_df <- data.frame(Value = overlap, In_both = rep("Yes", length(overlap)))
only_in_data1_df <- data.frame(Value = only_in_data1, In_both = rep("No (only in Data 1)", length(only_in_data1)))
only_in_data2_df <- data.frame(Value = only_in_data2, In_both = rep("No (only in Data 2)", length(only_in_data2)))
combined_df <- rbind(overlap_df, only_in_data1_df, only_in_data2_df)
combined_df <- combined_df[order(combined_df$Value), ]
print(combined_df)
}
# Creating box plot function ----
box_plots <- function(df, col1, col2, fill = NULL, col3 = NaN, col4 = NaN, filename = NaN) {
df <- df[order(df[[fill]]), ]
df[[col1]] <- factor(df[[col1]], levels = unique(df[[col1]]))
# Create a box plot with colors based on combinations of categories
if (is.null(fill)) {
p <- ggplot(df, aes_string(x = col1, y = col2)) +
geom_boxplot() +
labs(title = paste("Box Plot of ", col2, " by ", col1), x = col1, y = col2) +
scale_x_discrete(breaks = unique(df[[col1]])[seq(1, length(unique(df[[col1]])), length.out = 5)]) +
expand_limits(y = c(min(df[[col2]]), max(df[[col2]]))) +
theme(axis.text = element_text(size = 14))
} else {
p <- ggplot(df, aes_string(x = col1, y = col2, fill = fill)) +
geom_boxplot() +
labs(title = paste("Box Plot of ", col2, " by ", col1), x = col1, y = col2) +
scale_x_discrete(breaks = unique(df[[col1]])[seq(1, length(unique(df[[col1]])), length.out = 5)]) +
expand_limits(y = c(min(df[[col2]]), max(df[[col2]]))) +
theme(axis.text = element_text(size = 14))
}
df_max <- df[which(df[[col2]] == tapply(df[[col2]], df[[col1]], max)[df[[col1]]]), ]
if (!is.nan(col3) & !is.nan(col4)) {
labels <- ifelse(!is.nan(df_max[[col4]]), paste0(df_max[[col3]], " ", df_max[[col4]]), as.character(df_max[[col3]]))
p <- p + geom_text(data = df_max, aes(label = labels), vjust = -1)
} else if (!is.nan(col3)) {
p <- p + geom_text(data = df_max, aes_string(label = col3), vjust = -1)
} else if (!is.nan(col4)) {
p <- p + geom_text(data = df_max, aes_string(label = col4), vjust = -1)
}
if (!is.nan(filename)) {
ggsave(filename, plot = p + theme(axis.text = element_text(size = 24),   # Adjust axis text size
axis.title = element_text(size = 24),  # Adjust axis title size
plot.title = element_text(size = 30)), width = 60, height = 50, units = "cm", dpi = 300)
}
return(p)
}
violin_plots <- function(df, col1, col2, fill = NULL, col3 = NaN, col4 = NaN, filename = NaN){
df <- df[order(df[[fill]]), ]
df[[col1]] <- factor(df[[col1]], levels = unique(df[[col1]]))
# Create a violin plot with colors based on combinations of categories
if (is.null(fill)) {
p <- ggplot(df, aes_string(x = col1, y = col2)) +
geom_violin() +
geom_jitter(width=0.15, alpha=0.5) +
labs(title = paste("Box Plot of ", col2, " by ", col1), x = col1, y = col2) +
scale_x_discrete(breaks = unique(df[[col1]])[seq(1, length(unique(df[[col1]])), length.out = 5)]) +
expand_limits(y = c(min(df[[col2]]), max(df[[col2]])))
} else {
p <- ggplot(df, aes_string(x = col1, y = col2, fill = fill)) +
geom_violin() +
geom_jitter(width=0.15, alpha=0.5) +
labs(title = paste("Box Plot of ", col2, " by ", col1), x = col1, y = col2) +
scale_x_discrete(breaks = unique(df[[col1]])[seq(1, length(unique(df[[col1]])), length.out = 5)]) +
expand_limits(y = c(min(df[[col2]]), max(df[[col2]])))
}
df_max <- df[which(df[[col2]] == tapply(df[[col2]], df[[col1]], max)[df[[col1]]]), ]
if (!is.nan(col3) & !is.nan(col4)) {
labels <- ifelse(!is.nan(df_max[[col4]]), paste0(df_max[[col3]], " ", df_max[[col4]]), as.character(df_max[[col3]]))
p <- p + geom_text(data = df_max, aes(label = labels), vjust = -1)
} else if (!is.nan(col3)) {
p <- p + geom_text(data = df_max, aes_string(label = col3), vjust = -1)
} else if (!is.nan(col4)) {
p <- p + geom_text(data = df_max, aes_string(label = col4), vjust = -1)
}
if (!is.nan(filename)) {
ggsave(filename, plot = p+ theme(axis.text = element_text(size = 24),   # Adjust axis text size
axis.title = element_text(size = 24),  # Adjust axis title size
plot.title = element_text(size = 30)), width = 60, height = 60, units = "cm")
}
return(p)
}
dot_plots <- function(df, col1, col2, groups = NULL,thresholds=NULL, filename = NULL) {
# Create a box plot with colors based on combinations of categories
if (is.null(fill)) {
p <- ggplot(df, aes_string(x = col1, y = col2, shape = groups)) +
geom_point() +
labs(title = paste("Dot Plot of ", col2, " by ", col1), x = col1, y = col2) +
expand_limits(y = c(min(df[[col2]]), max(df[[col2]]))) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
} else {
p <- ggplot(df, aes_string(x = col1, y = col2, shape = groups)) +
geom_point() +
labs(title = paste("Dot Plot of ", col2, " by ", col1), x = col1, y = col2) +
expand_limits(y = c(min(df[[col2]]), max(df[[col2]]))) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
# Add threshold lines and assign colors
if (!is.null(thresholds)) {
num_thresholds <- length(thresholds)
color_palette <- colorRampPalette(c("red", "blue"))(num_thresholds)
for (i in 1:num_thresholds) {
p <- p + geom_hline(yintercept = thresholds[i], linetype = "dashed", color = color_palette[i])
}
}
if (!is.nan(filename)) {
ggsave(filename, plot = p, width = 20, height = 20, units = "cm")
}
return(p)
}
#Pie plot ----
pie_plots <- function(df, group_var, filename) {
category_counts <- df %>%
count({{ group_var }}) %>%
mutate(percent = freq / sum(freq) * 100)
print(category_counts)
pie_chart <- ggplot(category_counts, aes(x="", y = freq, fill = !!as.name(names(category_counts)[1]))) +
geom_col() +
coord_polar(theta = "y", start=0) +
theme_void() +
labs(title = paste("Category Counts for ", group_var)) +
geom_text(aes(label = paste0(round(percent, 1), '%')), position = position_stack(vjust = 0.5))+
scale_fill_brewer(palette = 'Spectral')
print(pie_chart)
ggsave(filename, plot=pie_chart)
}
make_bold_names <- function(mat, rc_fun, row=TRUE) {
bold_names <- rc_fun(mat)
ids <- rownames(mat) %>% match(rc_fun(mat))
if(row==FALSE){
ids <- colnames(mat) %>% match(rc_fun(mat))
}
ids %>%
walk(
function(i)
bold_names[i] <<-
bquote(bold(.(rc_fun(mat)[i]))) %>%
as.expression()
)
bold_names
}
#Heatmap plot function ----
heatmap_plots <- function(df, a_col, a_row = NaN, filename, fontsize = 18, fontsize_row = TRUE, a_color = list(
IGHV = c("NOT MUTATED" = "#6095a0", "MUTATED" = "#E55642"),
CH11QDLC = c("ABNORMAL" = "#F4A582", "NORMAL" = "#92C5DE"),
CH12TRIC = c("ABNORMAL" = "#F4A582", "NORMAL" = "#92C5DE"),
CH13QDEL = c("ABNORMAL" = "#F4A582", "NORMAL" = "#92C5DE"),
CH17PDLC = c("ABNORMAL" = "#F4A582", "NORMAL" = "#92C5DE"),
MRDSTAT_BONE_MARROW = c("NEGATIVE" = "#9e82ed", "INTERMEDIATE"="#e89829", "POSITIVE" = "#466D1D"),
MRDSTAT_BLOOD = c("NEGATIVE" = "#9e82ed", "INTERMEDIATE"="#e89829", "POSITIVE" = "#466D1D"))) {
if (fontsize_row == FALSE){
fontsize_r = 7
}else if (fontsize_row == TRUE){
fontsize_r = nrow(df) / 7
}
# Create heatmap
h <- pheatmap(
df,
#annotation_row = a_row,
annotation_col = a_col,
distfun = 'euclidean',
#color = hcl.colors(50, "BluYl"),
#color = colorRampPalette(brewer.pal(3, "RdBu"))(256), # Define color range
na_color = "grey",  # Set color for NA values
annotation_colors = a_color,
labels_row = make_bold_names(df, rownames),
labels_col = make_bold_names(df, colnames, FALSE),
fontsize_row=fontsize_r,
fontsize_col=fontsize_r,
fontsize = fontsize,
cutree_rows = 3,
cutree_cols = 3,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean"
)
if (!is.nan(filename)) {
ggsave(filename, plot = h, width = 150, height = 50, units = "cm", limitsize = FALSE)
}
return(h)
}
#pca plots function ----
pca_plots <- function(df, title = "PCA Plot", file_loc, label, color){
print(df[[label]])
# Perform PCA excluding specific columns
pca_result <- prcomp(df[, !names(df) %in% c(label, color)], scale. = TRUE)
# Extract PC scores
pc_scores <- as.data.frame(pca_result$x[, 1:2])  # Using only the first two principal components
# Combine PC scores with color information
pca_data <- cbind(pc_scores, lab = df[label])
print(pca_data)
pca_data <- cbind(pca_data, patient_id = df[color])
# Plot PCA
p <- ggplot(pca_data, aes(x = PC1, y = PC2, color = get(color), label = get(label))) +
geom_point() +
geom_text(nudge_x = 0.2, nudge_y = 0.2, size = 3) +
labs(title = title)
ggsave(plot = p, filename = file_loc)
return(p)
}
xicor <- function(X, Y, ties = TRUE){
n <- length(X)
r <- rank(Y[order(X)], ties.method = "random")
set.seed(42)
if(ties){
l <- rank(Y[order(X)], ties.method = "max")
return( 1 - n*sum( abs(r[-1] - r[-n]) ) / (2*sum(l*(n - l))) )
} else {
return( 1 - 3 * sum( abs(r[-1] - r[-n]) ) / (n^2 - 1) )
}
}
# Function to create correlation matrix using xicor function
create_correlation_matrix <- function(data, ties = TRUE) {
n_vars <- ncol(data)
cor_matrix <- matrix(NA, nrow = n_vars, ncol = n_vars, dimnames = list(colnames(data), colnames(data)))
for (i in 1:n_vars) {
for (j in 1:n_vars) {
cor_matrix[i, j] <- xicor(data[, i], data[, j], ties = ties)
}
}
return(cor_matrix)
}
correlation_plot <- function(df, method = 'pearson', title = 'Correlation matrix plot', filesave = "correlation_matrix.pdf", width = 80, height = 80, label_size = 0.15, bar_size = 5){
library(corrplot)
if (method == 'xicor'){
cor_df <- create_correlation_matrix(df)
}
else{
cor_df <- cor(df, method=method)
}
# Open a PDF device for saving with specified width and height
pdf(filesave, width = width, height = height)
par(cex.lab = label_size, cex = bar_size)
# Create the correlation plot
p <- corrplot(cor_df, method = 'color', order = 'alphabet', sig.level = 0.05, mar=c(0,0,1,0),
tl.col='black', tl.srt = 60, bg = "grey", title = title)
# Close the PDF device
dev.off()
return(p)
}
grid_plots <- function(df, col1, col2, label,title1, title2, filename){
library(gridExtra)
require(qqplotr)
library(ggplot2)
library(grid)
library("psychTools")
# Calculate R2 value
lm_model <- lm(get(col2) ~ get(col1), data = df)
r2 <- summary(lm_model)$r.squared
p_value <- summary(lm_model)$coefficients[2,4]
# Calculate xicor value
xicor_value <- cor(df[[col1]], df[[col2]], method = 'spearman')
# Line chart
p3 <- ggplot(df, aes(x = get(col1), y = get(col2))) +
geom_line(color = "gray20") +
xlab(paste0('', col1)) +
ylab(paste0('', col2))
# Scatter plot with R2 value
p4 <- ggplot(df, aes(x = get(col1), y = get(col2), label=get(label))) +
geom_point(color = "grey20") +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
xlab(paste0('', col1)) +
ylab(paste0('', col2)) +
geom_text() +
geom_label(aes(x = Inf, y = Inf, label = paste("R² = ", round(r2, 2), "\nP-value = ", round(p_value,3),"\nXicor = ", round(xicor_value, 2))),
hjust = 1.1, vjust = 2, size = 15, color = "blue", fontface = "bold",
fill = "white", label.size = NA)
gg1 <- ggplot(data = df, mapping = aes(sample = get(col1))) +
geom_qq_band(bandType = "ks", mapping = aes(fill = "KS"), alpha = 0.5) +
geom_qq_band(bandType = "ts", mapping = aes(fill = "TS"), alpha = 0.5) +
geom_qq_band(bandType = "pointwise", mapping = aes(fill = "Normal"), alpha = 0.5) +
geom_qq_band(bandType = "boot", mapping = aes(fill = "Bootstrap"), alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
scale_fill_discrete("Bandtype") +
ggtitle(title1)
gg2 <- ggplot(data = df, mapping = aes(sample = get(col2))) +
geom_qq_band(bandType = "ks", mapping = aes(fill = "KS"), alpha = 0.5) +
geom_qq_band(bandType = "ts", mapping = aes(fill = "TS"), alpha = 0.5) +
geom_qq_band(bandType = "pointwise", mapping = aes(fill = "Normal"), alpha = 0.5) +
geom_qq_band(bandType = "boot", mapping = aes(fill = "Bootstrap"), alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
scale_fill_discrete("Bandtype") +
ggtitle(title2)
g <- arrangeGrob(p3, p4, gg1, gg2)
ggsave(file=filename, g, units="cm", width = 100, height = 100)
return(g)
}
wilcox_test <- function(df, comparison_group, testing_group, value){
# Create an empty list to store results
results <- list()
result_df <- data.frame(
comparison_group = character(),
p_value = numeric(),
p_adj_value = numeric(),
logFC = numeric(),
FC = numeric
)
skipped_comp_group = c()
# Loop through comparison groups
for (comp_group in unique(df[[comparison_group]])) {
# Subset dataframe for each comparison group
subset_df <- subset(df, df[[comparison_group]] == comp_group)
print(comp_group)
# Subset data for testing_group = 1 and 0
l1 <- subset(subset_df, subset_df[[testing_group]] == 1, select = value)
print('l1')
print(l1)
l0 <- subset(subset_df, subset_df[[testing_group]] == 0, select = value)
print('l0')
print(l0)
if (dim(l1)[1] == 0 | dim(l0)[1] == 0){
skipped_comp_group <- comp_group
next
}
# Perform Wilcoxon rank sum test
test_result <- wilcox.test(l1[[value]], l0[[value]])
logFC <- log(median(l1[[value]]) / median(l0[[value]]))
print(median(l1[[value]]))
FC <- median(l1[[value]]) - median(l0[[value]])
# Store the result
results[[as.character(comp_group)]] <- test_result
p_value <- results[[comp_group]]$p.value
p_adj_value <- NaN
result_df <- rbind(result_df, data.frame(comparison_group = comp_group, p_value = p_value, p_adj_value = p_adj_value, logFC = logFC, FC=FC))
}
result_df$p_adj_value <- p.adjust(result_df$p_value, "fdr")
print(paste0("Groups skipped because of not enough observations ", skipped_comp_group))
return(result_df)
}
#Create Volcano plots
create_volcano_plot <- function(result_df, title, filename, threshold_pvalue = 0.05, threshold_logFC = 1, x_lab = "Change in DSS", x_axis = "FC", y_axis = "p_adj_value", y_lab = "-log10(p-adj-value)") {
library(ggplot2)
library(ggrepel)
# Define a new column for color based on significance
result_df$point_color <- ifelse(result_df[[y_axis]] < threshold_pvalue, "significant", "non-significant")
# Define a new column for label colors
result_df$label_color <- ifelse(grepl('clax', result_df$comparison_group), "blue",
ifelse(grepl('ib', result_df$comparison_group), "red", "black"))
# Create the plot
volcano_plot <- ggplot(result_df, aes(x = get(x_axis), y = -log10(get(y_axis)), color = point_color)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_manual(values = c("significant" = "#FFD966", "non-significant" = "black")) +
geom_hline(yintercept = -log10(threshold_pvalue), linetype = "dashed", color = "darkgrey", size = 1) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black", size = 1) +
labs(x = x_lab, y = y_lab, title = title) +
theme(legend.position = "none")
# Add labels for significant points with specified colors
volcano_plot <- volcano_plot +
geom_text_repel(data = subset(result_df, point_color == "significant"),
aes(label = comparison_group), color = result_df$label_color[result_df$point_color == "significant"],
hjust = -0.1, vjust = -0.5, size = 3, max.overlaps = Inf)
ggsave(filename, plot = volcano_plot, width = 20, height = 10)
return(volcano_plot)
}
heatmap_plots(fimm_common_drugs_heatmap,NaN, filename = "Desktop/UiO/Project 1/Figures/FIMM_github_calculations_common_drugs.png")
source("~/Desktop/UiO/Project 1/Code/plot_functions_project1.R")
save.image("~/Desktop/UiO/Project 1/Code/Project1.RData")
##----cell_counting_method----
mixed_model_cell_counting_method <- lmer(DSS2 ~ cell_counting_method + (cell_counting_method|drug), all_datasets_v2)
